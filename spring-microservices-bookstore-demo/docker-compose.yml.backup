services:
  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./databases/mongo-data:/data/db

  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order_service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./databases/postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always

  postgres-stock-check:
    container_name: postgres-stock-check
    image: postgres
    environment:
      POSTGRES_DB: stock_check_service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./databases/postgres-stock-check:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  postgres-author:
    container_name: postgres-author
    image: postgres
    environment:
      POSTGRES_DB: author_service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./databases/postgres-author:/data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://broker:29092,OUTSIDE://${PUBLIC_HOST}:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: microservices-bookstore/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false

  ## Config Server
  config-server:
    image: microservices-bookstore/config-server:latest
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:  # ‚Üê ADDED: Mount config files as volume for instant updates
      - ./config-server/src/main/resources/configurations:/app/resources/configurations:ro
    environment:
      - SPRING_PROFILES_ACTIVE=native
      - EUREKA_CLIENT_ENABLED=false
      - SPRING_CLOUD_DISCOVERY_ENABLED=false
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false

  api-gateway:
    image: microservices-bookstore/api-gateway:latest
    container_name: api-gateway
    ports:
      - "${GATEWAY_PORT:-8080}:8080"
    expose:
      - "8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - CONFIG_SERVER_URL=http://config-server:8888
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin:9411/api/v2/spans
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWEDORIGINS=http://${PUBLIC_HOST}:${FRONTEND_PORT},http://localhost:3000
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWEDMETHODS=GET,POST,PUT,DELETE,OPTIONS
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWEDHEADERS=*
      - SPRING_CLOUD_GATEWAY_GLOBALCORS_CORS_CONFIGURATIONS_[/**]_ALLOWCREDENTIALS=true
      - SPRING_CLOUD_GATEWAY_DEFAULT-FILTERS[0]=DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin RETAIN_UNIQUE      
    depends_on:
      - discovery-server
      - config-server

  ## Book Service Docker Compose Config
  book-service:
    container_name: book-service
    image: microservices-bookstore/book-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/book_service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    depends_on:
      - api-gateway
      - mongo

  ## Author Service Docker Compose Config
  author-service:
    container_name: author-service
    image: microservices-bookstore/author-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres-author:5433/author_service
      - SPRING_R2DBC_USERNAME=admin
      - SPRING_R2DBC_PASSWORD=password
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-author:5433/author_service
      - SPRING_FLYWAY_USER=admin
      - SPRING_FLYWAY_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    depends_on:
      - api-gateway
      - postgres-author

  ## Order Service Docker Compose Config
  order-service:
    container_name: order-service
    image: microservices-bookstore/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-order:5431/order_service
      - SPRING_FLYWAY_USER=admin
      - SPRING_FLYWAY_PASSWORD=password
      - SERVER_PORT=8080
      - STOCK_CHECK_BASE_URL=http://stock-check-service:8080 
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    depends_on:
      - api-gateway
      - postgres-order

  ## Stock Check Service Docker Compose Config
  stock-check-service:
    container_name: stock-check-service
    image: microservices-bookstore/stock-check-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-stock-check:5432/stock_check_service
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres-stock-check:5432/stock_check_service
      - SPRING_FLYWAY_USER=admin
      - SPRING_FLYWAY_PASSWORD=password
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    depends_on:
      - api-gateway
      - postgres-stock-check

  ## Message Service Docker Compose Config
  message-service:
    container_name: message-service
    image: microservices-bookstore/message-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8888
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=${SPRING_KAFKA_CONSUMER_GROUP_ID}
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka
      - SPRING_AUTOCONFIGURE_EXCLUDE=org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
      - JAVA_TOOL_OPTIONS=-XX:-UseContainerSupport -Dmicrometer.system.metrics.enabled=false -Dspring.jmx.enabled=false -Deureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka
    depends_on:
      - api-gateway
      - broker
      - zookeeper

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - book-service
      - stock-check-service
      - order-service
      - message-service

  ## Grafana
  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password

  ## NextJS Frontend
  nextjs-frontend:
    container_name: nextjs-frontend
    image: microservices-bookstore/nextjs-frontend:latest
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_BASE=${NEXT_PUBLIC_API_BASE}
      - NEXT_PUBLIC_GRAPHQL_ENDPOINT=${NEXT_PUBLIC_GRAPHQL_ENDPOINT}
      - NEXT_PUBLIC_AUTHORS_ENDPOINT=${NEXT_PUBLIC_AUTHORS_ENDPOINT}
    depends_on:
      - api-gateway

volumes:
  grafana_data: